{
	//This formula demonstrates varios FuncScript syntaxes
    //The formula generates a simple payroll sheet based an employees record given as literal
	//We don't expect to compose such a complex formula in UMIS configurations
	
	//List literal
	employees: [											
		["Abebe Kebede", 5000.0],
		["Zeleke Ayele", 65000.0,"temporary"],
		["Aberra Tesema", 28000.0],
		["Zeleke Abriha", 28000.0,"temporary"]
	];

	//Define income tax and pension functions
	taxF: (x) =>if (x < 1000, 0.0,if (x < 4000, (x - 1000) * 0.3, (x - 4000) * 0.4 + 900));
	penF: (x) => x * 0.07;

	//Map employees records by additing calculated values to each record
	calculation : Map(employees, (row) => {
		t: taxF(row(1));
		p: penF(row(1));
		perm: not("temporary" in row);
		net: row(1) - t - p;

		return [row(0), row(1),if(perm,"Permanent","Temporary"), t,if(perm,p,0), net];  //here the old employee record 
																						//is mapped to new record with statu,tax,pension and net salary
	});


	//Reduce calculated records to a total record
	totals: Reduce(calculation, (row, sum) => [sum(0) + row(1), //gross salary is row(1)
												sum(1) + row(3), //tax is row(3)
												sum(2) + row(4), //pension is row(4)
												sum(3) + row(5)],//net  is row(5) 
												[0.0, 0.0, 0.0, 0.0]);
	
	//inline styles
	align_right: "style='text-align:right'";
	header_style:"style='font-weight: bold;font-size: large;'";

    //function that converts a record in to html row
	rowfunc: (row) =>
		"<td>{i+1}. {row(0)}</td>
		<td> { row(2) }</td>
		<td {align_right}> { row(1) }</td>
		<td {align_right}>{birr(row(3))}</td>
		<td {align_right}>{birr(row(4))}</td>
		<td {align_right}>{birr(row(5))}</td>";

    //map each calculated employee record to an html row
	table_rows: Map(calculation, (x, i) => "<tr>{rowfunc(x)}</tr>");
	
    birr:(x)=>format(x,"#,#0.00"); //function for formatting money amounts
	
	//build the an html row for the total row
	total_row: "<tr {header_style}><td colspan=2 {align_right}>Total</td>
		<td {align_right}>{birr(totals(0))}</td>
		<td {align_right}>{birr(totals(1))}</td>
		<td {align_right}>{birr(totals(2))}</td>
		<td {align_right}>{birr(totals(3))}</td></tr>";
	
	//build the html table
	table:
		"<table style='width:100%;color:gray'>
			<tr {header_style}><td>Employee</td>
			<td>Status</td>
			<td {align_right}>Gross Salary</td>
			<td {align_right}>Income Tax</td>
			<td {align_right}>Pension</td>
			<td {align_right}>Net</td></tr:
			{ Reduce(table_rows,(x, t)=> t + x)}
			{ total_row }
		</table>";

	return table;
}